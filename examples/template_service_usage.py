"""–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TemplateService –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ –ø–æ—Å—Ç–æ–≤"""

import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any

from database.db_main import get_session
from database.unit_of_work import UnitOfWork
from database.models.admin_post import MediaType


async def create_template_example():
    """–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å—Ç–∞"""
    async with get_session() as session:
        uow = UnitOfWork(session)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        template = await uow.template_service.create_template(
            title="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π",
            content="üì∞ –°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {date}\n\n{news_content}\n\n#–Ω–æ–≤–æ—Å—Ç–∏ #—Å–≤–æ–¥–∫–∞",
            template_name="daily_news",
            template_description="–®–∞–±–ª–æ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–≤–æ–¥–æ–∫",
            created_by=123456789,
            hashtags=["–Ω–æ–≤–æ—Å—Ç–∏", "—Å–≤–æ–¥–∫–∞", "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"],
            categories=["–ù–æ–≤–æ—Å—Ç–∏", "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ"]
        )
        
        print(f"–°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω: {template.template_name} (ID: {template.id})")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å –º–µ–¥–∏–∞
        media_template = await uow.template_service.create_template(
            title="–ü—Ä–æ–º–æ-–ø–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º",
            content="üéâ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!\n\n{offer_description}\n\nüí∞ –°–∫–∏–¥–∫–∞: {discount}%\n‚è∞ –î–æ: {end_date}",
            template_name="promo_image",
            template_description="–®–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ–º–æ-–ø–æ—Å—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º",
            created_by=123456789,
            media_type=MediaType.PHOTO,
            media_caption="–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            hashtags=["–ø—Ä–æ–º–æ", "—Å–∫–∏–¥–∫–∞", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"],
            categories=["–ü—Ä–æ–º–æ", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"]
        )
        
        print(f"–°–æ–∑–¥–∞–Ω –º–µ–¥–∏–∞-—à–∞–±–ª–æ–Ω: {media_template.template_name} (ID: {media_template.id})")
        
        await session.commit()
        return template, media_template


async def manage_templates_example():
    """–ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏"""
    async with get_session() as session:
        uow = UnitOfWork(session)
        user_id = 123456789
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        templates = await uow.template_service.get_user_templates(
            user_id=user_id,
            limit=10,
            search="–Ω–æ–≤–æ—Å—Ç–∏"
        )
        
        print(f"–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
        for template in templates:
            print(f"- {template.template_name}: {template.title}")
        
        if templates:
            template = templates[0]
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
            updated_template = await uow.template_service.update_template(
                template_id=template.id,
                user_id=user_id,
                template_description="–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞",
                hashtags=["–Ω–æ–≤–æ—Å—Ç–∏", "—Å–≤–æ–¥–∫–∞", "–æ–±–Ω–æ–≤–ª–µ–Ω–æ"]
            )
            
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω: {updated_template.template_name}")
            
            # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
            duplicate = await uow.template_service.duplicate_template(
                template_id=template.id,
                user_id=user_id,
                new_template_name="daily_news_copy"
            )
            
            print(f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ–ø–∏—è: {duplicate.template_name}")
        
        await session.commit()


async def create_post_from_template_example():
    """–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞"""
    async with get_session() as session:
        uow = UnitOfWork(session)
        user_id = 123456789
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        template = await uow.template_service.get_template_by_name(
            template_name="daily_news",
            user_id=user_id
        )
        
        if template:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
            post = await uow.template_service.create_post_from_template(
                template_id=template.id,
                user_id=user_id,
                title="–ù–æ–≤–æ—Å—Ç–∏ –∑–∞ 15 –¥–µ–∫–∞–±—Ä—è 2024",
                content=template.content.replace(
                    "{date}", "15 –¥–µ–∫–∞–±—Ä—è 2024"
                ).replace(
                    "{news_content}", "–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∏–∑–æ—à–ª–∏ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è..."
                ),
                target_groups=[1001, 1002],
                scheduled_at=datetime.now() + timedelta(hours=1),
                additional_hashtags=["15–¥–µ–∫–∞–±—Ä—è"],
                additional_categories=["–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ"]
            )
            
            print(f"–°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞: {post.title} (ID: {post.id})")
            print(f"–°—Ç–∞—Ç—É—Å: {post.status}")
            print(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: {post.scheduled_at}")
        
        await session.commit()


async def template_categories_and_stats_example():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —à–∞–±–ª–æ–Ω–æ–≤"""
    async with get_session() as session:
        uow = UnitOfWork(session)
        user_id = 123456789
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = await uow.template_service.get_template_categories(user_id)
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {categories}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = await uow.template_service.get_template_statistics(user_id)
        print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤:")
        print(f"- –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {stats.get('total_templates', 0)}")
        print(f"- –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {stats.get('categories_count', 0)}")
        print(f"- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {stats.get('category_distribution', {})}")
        print(f"- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –º–µ–¥–∏–∞: {stats.get('media_type_distribution', {})}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if categories:
            category_templates = await uow.template_service.get_user_templates(
                user_id=user_id,
                category=categories[0],
                limit=5
            )
            print(f"–®–∞–±–ª–æ–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{categories[0]}': {len(category_templates)}")


async def search_and_recommendations_example():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —à–∞–±–ª–æ–Ω–æ–≤"""
    async with get_session() as session:
        uow = UnitOfWork(session)
        user_id = 123456789
        
        # –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤
        search_results = await uow.template_service.search_templates(
            user_id=user_id,
            query="–Ω–æ–≤–æ—Å—Ç–∏",
            limit=5,
            include_content=True
        )
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '–Ω–æ–≤–æ—Å—Ç–∏': {len(search_results)}")
        for template in search_results:
            print(f"- {template.template_name}: {template.title}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        recommendations = await uow.template_service.get_recommended_templates(
            user_id=user_id,
            based_on_categories=["–ù–æ–≤–æ—Å—Ç–∏", "–ü—Ä–æ–º–æ"],
            limit=3
        )
        
        print(f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã: {len(recommendations)}")
        for template in recommendations:
            print(f"- {template.template_name}: {template.categories}")


async def export_import_example():
    """–ü—Ä–∏–º–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
    async with get_session() as session:
        uow = UnitOfWork(session)
        user_id = 123456789
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        template = await uow.template_service.get_template_by_name(
            template_name="daily_news",
            user_id=user_id
        )
        
        if template:
            # –≠–∫—Å–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–∞
            export_data = await uow.template_service.export_template(
                template_id=template.id,
                user_id=user_id
            )
            
            print("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            print(f"- –ù–∞–∑–≤–∞–Ω–∏–µ: {export_data['template_name']}")
            print(f"- –í–µ—Ä—Å–∏—è: {export_data['version']}")
            print(f"- –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_data['exported_at']}")
            
            # –ò–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
            import_data = export_data.copy()
            import_data['template_name'] = 'imported_daily_news'
            import_data['title'] = '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–æ–≤–æ—Å—Ç–µ–π'
            
            # –ò–º–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–∞
            imported_template = await uow.template_service.import_template(
                template_data=import_data,
                user_id=user_id
            )
            
            print(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —à–∞–±–ª–æ–Ω: {imported_template.template_name} (ID: {imported_template.id})")
        
        await session.commit()


async def telegram_bot_integration_example():
    """–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram –±–æ—Ç–æ–º"""
    # –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TemplateService –≤ –±–æ—Ç–µ
    
    async def handle_create_template_command(message, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
        async with get_session() as session:
            uow = UnitOfWork(session)
            
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                lines = message.text.split('\n')
                template_name = lines[1].replace('–ù–∞–∑–≤–∞–Ω–∏–µ: ', '')
                title = lines[2].replace('–ó–∞–≥–æ–ª–æ–≤–æ–∫: ', '')
                content = '\n'.join(lines[3:])
                
                template = await uow.template_service.create_template(
                    title=title,
                    content=content,
                    template_name=template_name,
                    created_by=user_id,
                    categories=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ"]
                )
                
                await session.commit()
                return f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
                
            except Exception as e:
                await session.rollback()
                return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {str(e)}"
    
    async def handle_list_templates_command(user_id: int):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
        async with get_session() as session:
            uow = UnitOfWork(session)
            
            templates = await uow.template_service.get_user_templates(
                user_id=user_id,
                limit=10
            )
            
            if not templates:
                return "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤"
            
            response = "üìã –í–∞—à–∏ —à–∞–±–ª–æ–Ω—ã:\n\n"
            for i, template in enumerate(templates, 1):
                response += f"{i}. {template.template_name}\n"
                response += f"   üìÑ {template.title}\n"
                if template.categories:
                    response += f"   üè∑ {', '.join(template.categories)}\n"
                response += "\n"
            
            return response
    
    async def handle_use_template_command(template_name: str, user_id: int, target_groups: List[int]):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
        async with get_session() as session:
            uow = UnitOfWork(session)
            
            try:
                template = await uow.template_service.get_template_by_name(
                    template_name=template_name,
                    user_id=user_id
                )
                
                if not template:
                    return f"‚ùå –®–∞–±–ª–æ–Ω '{template_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                
                post = await uow.template_service.create_post_from_template(
                    template_id=template.id,
                    user_id=user_id,
                    target_groups=target_groups,
                    scheduled_at=datetime.now() + timedelta(minutes=5)
                )
                
                await session.commit()
                return f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ '{template_name}' –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é"
                
            except Exception as e:
                await session.rollback()
                return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {str(e)}"
    
    # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
    print("–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞:")
    print("/create_template - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω")
    print("/list_templates - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤")
    print("/use_template <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω")
    print("/template_stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —à–∞–±–ª–æ–Ω–æ–≤")


async def advanced_template_management_example():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏"""
    async with get_session() as session:
        uow = UnitOfWork(session)
        user_id = 123456789
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π
        templates_data = [
            {
                "title": "–£—Ç—Ä–µ–Ω–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è",
                "content": "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n{motivation_text}\n\n#–º–æ—Ç–∏–≤–∞—Ü–∏—è #—É—Ç—Ä–æ #–ø–æ–∑–∏—Ç–∏–≤",
                "template_name": "morning_motivation",
                "template_description": "–®–∞–±–ª–æ–Ω –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤",
                "categories": ["–ú–æ—Ç–∏–≤–∞—Ü–∏—è", "–£—Ç—Ä–æ"]
            },
            {
                "title": "–í–µ—á–µ—Ä–Ω–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è",
                "content": "üåô –í–µ—á–µ—Ä–Ω–∏–µ –º—ã—Å–ª–∏...\n\n{thoughts}\n\n#—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è #–≤–µ—á–µ—Ä #—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è",
                "template_name": "evening_thoughts",
                "template_description": "–®–∞–±–ª–æ–Ω –¥–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤",
                "categories": ["–§–∏–ª–æ—Å–æ—Ñ–∏—è", "–í–µ—á–µ—Ä"]
            },
            {
                "title": "–û–±–∑–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞",
                "content": "üì¶ –û–±–∑–æ—Ä: {product_name}\n\n‚úÖ –ü–ª—é—Å—ã:\n{pros}\n\n‚ùå –ú–∏–Ω—É—Å—ã:\n{cons}\n\n‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}/10",
                "template_name": "product_review",
                "template_description": "–®–∞–±–ª–æ–Ω –¥–ª—è –æ–±–∑–æ—Ä–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                "categories": ["–û–±–∑–æ—Ä—ã", "–ü—Ä–æ–¥—É–∫—Ç—ã"]
            }
        ]
        
        created_templates = []
        for template_data in templates_data:
            try:
                template = await uow.template_service.create_template(
                    created_by=user_id,
                    **template_data
                )
                created_templates.append(template)
                print(f"–°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω: {template.template_name}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ {template_data['template_name']}: {e}")
        
        # –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
        posts_data = [
            {
                "template_name": "morning_motivation",
                "content_replacements": {
                    "{motivation_text}": "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ!"
                },
                "target_groups": [1001]
            },
            {
                "template_name": "product_review",
                "content_replacements": {
                    "{product_name}": "iPhone 15 Pro",
                    "{pros}": "- –û—Ç–ª–∏—á–Ω–∞—è –∫–∞–º–µ—Ä–∞\n- –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–±–æ—Ç–∞\n- –ü—Ä–µ–º–∏—É–º –¥–∏–∑–∞–π–Ω",
                    "{cons}": "- –í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞\n- –ë—ã—Å—Ç—Ä–æ —Ä–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è",
                    "{rating}": "8"
                },
                "target_groups": [1002, 1003]
            }
        ]
        
        for post_data in posts_data:
            try:
                template = await uow.template_service.get_template_by_name(
                    template_name=post_data["template_name"],
                    user_id=user_id
                )
                
                if template:
                    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                    content = template.content
                    for placeholder, replacement in post_data["content_replacements"].items():
                        content = content.replace(placeholder, replacement)
                    
                    post = await uow.template_service.create_post_from_template(
                        template_id=template.id,
                        user_id=user_id,
                        content=content,
                        target_groups=post_data["target_groups"],
                        scheduled_at=datetime.now() + timedelta(minutes=10)
                    )
                    
                    print(f"–°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞ '{post_data['template_name']}': {post.id}")
            
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ {post_data['template_name']}: {e}")
        
        await session.commit()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = await uow.template_service.get_template_statistics(user_id)
        print(f"\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_templates']} —à–∞–±–ª–æ–Ω–æ–≤ –≤ {stats['categories_count']} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("=== –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TemplateService ===")
    
    try:
        print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤")
        await create_template_example()
        
        print("\n2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏")
        await manage_templates_example()
        
        print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤")
        await create_post_from_template_example()
        
        print("\n4. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        await template_categories_and_stats_example()
        
        print("\n5. –ü–æ–∏—Å–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        await search_and_recommendations_example()
        
        print("\n6. –≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç")
        await export_import_example()
        
        print("\n7. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –±–æ—Ç–æ–º")
        await telegram_bot_integration_example()
        
        print("\n8. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        await advanced_template_management_example()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")


if __name__ == "__main__":
    asyncio.run(main())