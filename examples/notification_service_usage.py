"""–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NotificationService"""

import asyncio
from datetime import datetime, timedelta
from database import get_session
from database.unit_of_work import UnitOfWork
from database.services.notification_service import NotificationType, NotificationPriority


async def example_post_notifications():
    """–ü—Ä–∏–º–µ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ—Å—Ç–∞—Ö"""
    async with get_session() as session:
        uow = UnitOfWork(session)
        notification_service = uow.notification_service
        
        print("=== –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç–∞—Ö ===")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        success = await notification_service.notify_post_published(
            post_id=1,
            admin_id=1
        )
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        success = await notification_service.notify_post_failed(
            post_id=2,
            error_message="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏",
            admin_id=1
        )
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        scheduled_time = datetime.now() + timedelta(hours=2)
        success = await notification_service.notify_post_scheduled(
            post_id=3,
            scheduled_time=scheduled_time,
            admin_id=1
        )
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}")


async def example_system_notifications():
    """–ü—Ä–∏–º–µ—Ä—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    async with get_session() as session:
        uow = UnitOfWork(session)
        notification_service = uow.notification_service
        
        print("\n=== –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–µ
        success = await notification_service.notify_system_error(
            error_type="DatabaseConnectionError",
            error_message="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            context={
                "host": "localhost",
                "port": 5432,
                "database": "tmb_bot",
                "retry_count": 3
            }
        )
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        success = await notification_service.notify_moderation_required(
            post_id=4,
            reason="–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–ø–æ—Ä–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
        )
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–æ—Ç
        success = await notification_service.notify_quota_warning(
            quota_type="daily_posts",
            current_usage=95,
            limit=100,
            admin_id=1
        )
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–≤–æ—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}")


async def example_bulk_notifications():
    """–ü—Ä–∏–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    async with get_session() as session:
        uow = UnitOfWork(session)
        notification_service = uow.notification_service
        
        print("\n=== –ú–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        admin_ids = [1, 2, 3]  # ID –∞–¥–º–∏–Ω–æ–≤
        results = await notification_service.send_bulk_notification(
            notification_type=NotificationType.SYSTEM_ERROR,
            message="üîß –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n\n–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å 02:00 –¥–æ 04:00 –ú–°–ö",
            admin_ids=admin_ids,
            metadata={
                "maintenance_start": "2024-01-15T02:00:00",
                "maintenance_end": "2024-01-15T04:00:00",
                "affected_services": ["posting", "analytics"]
            }
        )
        
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:")
        for admin_id, success in results.items():
            print(f"  –ê–¥–º–∏–Ω {admin_id}: {'‚úÖ' if success else '‚ùå'}")


async def example_notification_settings():
    """–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    async with get_session() as session:
        uow = UnitOfWork(session)
        notification_service = uow.notification_service
        
        print("\n=== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings = await notification_service.get_notification_settings(admin_id=1)
        print(f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {len(settings)} —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        new_settings = {
            "post_published": {
                "enabled": True,
                "channels": ["telegram", "email"]
            },
            "system_error": {
                "enabled": True,
                "channels": ["telegram", "email", "webhook"]
            },
            "quiet_hours": {
                "enabled": True,
                "start": "22:00",
                "end": "08:00"
            }
        }
        
        success = await notification_service.update_notification_settings(
            admin_id=1,
            settings=new_settings
        )
        print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {success}")


async def example_notification_monitoring():
    """–ü—Ä–∏–º–µ—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    async with get_session() as session:
        uow = UnitOfWork(session)
        notification_service = uow.notification_service
        
        print("\n=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        health = await notification_service.check_notification_health()
        print(f"–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {health['status']}")
        print("–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤:")
        for channel, status in health['channels'].items():
            print(f"  {channel}: {status}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = await notification_service.get_notification_statistics(days=7)
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats['period_days']} –¥–Ω–µ–π:")
        print(f"  –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['total_sent']}")
        print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%")
        
        # –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        history = await notification_service.get_notification_history(
            admin_id=1,
            limit=10
        )
        print(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(history)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞ 1")


async def example_telegram_bot_integration():
    """–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram –±–æ—Ç–æ–º"""
    print("\n=== –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot ===")
    
    # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    class TelegramNotificationHandler:
        def __init__(self, bot):
            self.bot = bot
        
        async def send_admin_notification(self, admin_telegram_id: int, message: str):
            """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
            try:
                await self.bot.send_message(
                    chat_id=admin_telegram_id,
                    text=message,
                    parse_mode="HTML"
                )
                return True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                return False
        
        async def send_notification_with_buttons(self, admin_telegram_id: int, 
                                               message: str, post_id: int):
            """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                        callback_data=f"edit_post_{post_id}"
                    ),
                    InlineKeyboardButton(
                        text="üóë –£–¥–∞–ª–∏—Ç—å",
                        callback_data=f"delete_post_{post_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                        callback_data=f"stats_post_{post_id}"
                    )
                ]
            ])
            
            try:
                await self.bot.send_message(
                    chat_id=admin_telegram_id,
                    text=message,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                return True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
                return False
    
    print("–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ TelegramNotificationHandler –≤ –≤–∞—à–µ–º –±–æ—Ç–µ.")


async def example_custom_notification_types():
    """–ü—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    async with get_session() as session:
        uow = UnitOfWork(session)
        notification_service = uow.notification_service
        
        print("\n=== –ö–∞—Å—Ç–æ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
        await notification_service.send_bulk_notification(
            notification_type=NotificationType.SYSTEM_ERROR,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø
            message=(
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n"
                "–í–∞—à –±–æ—Ç –¥–æ—Å—Ç–∏–≥ 1000 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!\n"
                "üìà –†–æ—Å—Ç –∑–∞ –º–µ—Å—è—Ü: +250 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "üî• –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç: '–ù–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π'"
            ),
            admin_ids=[1],
            metadata={
                "achievement_type": "subscriber_milestone",
                "milestone_value": 1000,
                "growth_period": "month",
                "growth_value": 250
            }
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await notification_service.notify_system_error(
            error_type="SecurityAlert",
            error_message="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            context={
                "event_type": "multiple_failed_logins",
                "ip_address": "192.168.1.100",
                "attempts": 5,
                "time_window": "5 minutes",
                "action_taken": "temporary_ip_block"
            }
        )
        
        print("–ö–∞—Å—Ç–æ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    print("üîî –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NotificationService\n")
    
    try:
        await example_post_notifications()
        await example_system_notifications()
        await example_bulk_notifications()
        await example_notification_settings()
        await example_notification_monitoring()
        await example_telegram_bot_integration()
        await example_custom_notification_types()
        
        print("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")


if __name__ == "__main__":
    asyncio.run(main())